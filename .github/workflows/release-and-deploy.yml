name: Release @ GitHub and deploy @ Heroku

# Controls when the action will run. 
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.4.0
      - uses: gradle/wrapper-validation-action@v1
  
      #
      # Setup Java
      #
      - name: Set up JDK 1.8
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: 8
          
      #
      # Setup Node.js 
      #
      - name: Set up Node.js 14.15.1
        uses: actions/setup-node@v2.4.1
        with:
          node-version: 14.15.1

      #
      # Caching node_modules for speedup
      #
      - name: Cache node_modules 
        uses: actions/cache@v2.1.6
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-v2-${{ hashFiles('**/yarn.lock') }}

      - name: Install node modules
        working-directory: ./src-frontend
        run: yarn install
        
      #
      # Caching gradle dependencies for speedup
      #
      - name: Cache gradle dependencies
        uses: actions/cache@v2.1.6
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-v2-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
        
      #
      # Build release with gradle
      #
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build with gradle
        run: ./gradlew -Pversion="${{ steps.get_version.outputs.VERSION }}" build
        env:
          CI: ""
          
      - name: Check bundle
        run: ls ./bundle -l
        
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: server-artifact
          path: ./bundle
          
          
  release:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.4.0
      
        # Get latest artifact
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: server-artifact
          path: ./bundle
          
      - name: Check bundle
        run: ls ./bundle -l
        
        # Build Changelog by PRs
      - name: "Build changelog"
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v2
        with:
          configuration: ".github/release-changelog-configuration.json"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
        # Create and publish Release
      - name: Create release @ GitHub
        id: create_release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: ${{steps.build_changelog.outputs.changelog}}
          draft: false
          prerelease: false
          
      - name: Upload release asset @ GitHub
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./bundle/server.jar
          asset_name: server.jar
          asset_content_type: application/jar          
          
          
         
  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.4.0
        
        # Create and update status of deployment  
      - uses: altinukshini/deployment-action@releases/v1
        name: Create GitHub deployment
        id: deployment
        with:
          token: "${{ github.token }}"
          target_url: https://grid-optimizer.herokuapp.com/
          environment: "Production"
        
        # Get latest Artifact
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: server-artifact
          path: ./bundle
      - name: Check bundle
        run: ls ./bundle -l
      
        # Deploy
      - name: Dockerize and deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.12.12 # This is the action
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: "grid-optimizer"
          heroku_email: ${{secrets.HEROKU_EMAIL}}
          usedocker: true
          healthcheck: "https://grid-optimizer.herokuapp.com/api/version"
          delay: 15
          rollbackonhealthcheckfailed: true
          stack: "container"
          region: "eu"

        # Update status
      - name: Update deployment status (success)
        if: success()
        uses: altinukshini/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          target_url: https://grid-optimizer.herokuapp.com}}
          environment_url: https://grid-optimizer.herokuapp.com
          state: "success"
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Update deployment status (failure)
        if: failure()
        uses: altinukshini/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          target_url: https://grid-optimizer.herokuapp.com}}
          environment_url: https://grid-optimizer.herokuapp.com
          state: "failure"
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
 
